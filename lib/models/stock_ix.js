// Generated by CoffeeScript 1.6.1
(function() {
  var StockIX, WindTalker, logger, redis, settings, stock_ix,
    _this = this,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  WindTalker = require('./wind_talker');

  settings = require('../config/settings');

  logger = require('../config/logger');

  redis = require('../db/redis_util').createClient();

  StockIX = (function(_super) {

    __extends(StockIX, _super);

    function StockIX() {
      var _this = this;
      this.analyze_data = function(cursor, raw_buf) {
        return StockIX.prototype.analyze_data.apply(_this, arguments);
      };
      return StockIX.__super__.constructor.apply(this, arguments);
    }

    StockIX.prototype.keys_map = function() {
      var obj;
      return obj = {
        'IXCOZCA0': 'U-CO',
        'IXCOZSA0': 'U-BE',
        'IXCOZWA0': 'U-WH',
        'IXFXAUDUSD': 'AUDUSD',
        'IXFXEURGBP': 'EURGBP',
        'IXFXEURUSD': 'EURUDS',
        'IXFXGBPUSD': 'GBPUSD',
        'IXFXUSDBRL': 'USDBRL',
        'IXFXUSDCAD': 'USDCAD',
        'IXFXUSDCHF': 'USDCHF',
        'IXFXUSDCNY': 'USDCNY',
        'IXFXUSDINR': 'USDINR',
        'IXFXUSDJPY': 'USDJPY',
        'IXFXUSDKRW': 'USDKRW',
        'IXFXUSDMXN': 'USDMXN',
        'IXFXUSDRUB': 'USDRUB',
        'IXFXUSDSGD': 'USDSGD',
        'IXFXUSDTHB': 'USDTHB',
        'IXFXXAG': 'SLV',
        'IXFXXAP': 'PLT',
        'IXFXXAU': 'GLD',
        'IXNECLA0': 'OIL'
      };
    };

    StockIX.prototype.analyze_data = function(cursor, raw_buf) {
      var buf, buyAmount, buyBids, contract, data, feature_price, holding, i, latest_deal, m_fAmount, m_fHigh, m_fLastClose, m_fLow, m_fNewPrice, m_fOpen, m_fVolume, market, result, sellAmount, sellBids, time_t, total_deal, val, _i;
      if (cursor >= raw_buf.length) {
        console.log("process finished.");
        return;
      }
      console.log("analyzing...");
      data = new Buffer(156);
      data.fill(0);
      result = '';
      buf = raw_buf.copy(data, 0, cursor, cursor + 156);
      time_t = data.readUInt32LE(0);
      result += "" + time_t + ",";
      for (i = _i = 4; _i <= 15; i = ++_i) {
        if (data[i] === 0) {
          break;
        }
      }
      market = data.toString('ascii', 4, i);
      result += "" + market + ",";
      contract = data.toString('ascii', 16, 31);
      result += "" + contract + ",";
      total_deal = data.readFloatLE(32);
      result += "" + total_deal + ",";
      latest_deal = data.readFloatLE(36);
      result += "" + latest_deal + ",";
      holding = data.readFloatLE(40);
      result += "" + holding + ",";
      feature_price = data.readFloatLE(44);
      result += "" + feature_price + ",";
      m_fLastClose = data.readFloatLE(48);
      result += "" + m_fLastClose + ",";
      m_fOpen = data.readFloatLE(52);
      result += "" + m_fOpen + ",";
      m_fHigh = data.readFloatLE(56);
      result += "" + m_fHigh + ",";
      m_fLow = data.readFloatLE(60);
      result += "" + m_fLow + ",";
      m_fNewPrice = data.readFloatLE(64);
      result += "" + m_fNewPrice + ",";
      m_fVolume = data.readFloatLE(68);
      result += "" + m_fVolume + ",";
      m_fAmount = data.readFloatLE(72);
      result += "" + m_fAmount + ",[";
      i = 0;
      buyBids = [];
      while (i < 5) {
        val = data.readFloatLE(76 + i * 4);
        buyBids.push(val);
        result += "" + val;
        if (i !== 4) {
          result += ",";
        }
        i += 1;
      }
      result += "],[";
      i = 0;
      buyAmount = [];
      while (i < 5) {
        val = data.readFloatLE(96 + i * 4);
        buyAmount.push(val);
        result += "" + val;
        if (i !== 4) {
          result += ",";
        }
        i += 1;
      }
      result += "],[";
      i = 0;
      sellBids = [];
      while (i < 5) {
        val = data.readFloatLE(116 + i * 4);
        sellBids.push(val);
        result += "" + val;
        if (i !== 4) {
          result += ",";
        }
        i += 1;
      }
      result += "],[";
      i = 0;
      sellAmount = [];
      while (i < 5) {
        val = data.readFloatLE(136 + i * 4);
        sellAmount.push(val);
        result += "" + val;
        if (i !== 4) {
          result += ",";
        }
        i += 1;
      }
      result += "]";
      this.saveToDb(time_t, market, m_fLastClose, m_fOpen, m_fHigh, m_fLow, m_fNewPrice, m_fVolume, m_fAmount);
      result = null;
      raw_buf = raw_buf.slice(cursor + 156, raw_buf.length);
      cursor = 0;
      return this.analyze_data(cursor, raw_buf);
    };

    StockIX.prototype.saveToDb = function(time, ticker, fLastClose, fOpen, fHigh, fLow, fNewPrice, fVolume, fAmount) {
      var corresponding_key, key;
      corresponding_key = this.keys_map[ticker];
      if (ticker === 'IXFXNZDUSD' || ticker === 'IXFXUSDTRY' || ticker === 'IXIXUDI') {
        corresponding_key = ticker;
      }
      corresponding_key = ticker;
      if (corresponding_key) {
        key = "" + settings.redisNamespace + ":IX:" + corresponding_key;
        return redis.hmset(key, {
          "t": "" + time,
          "close": "" + fLastClose,
          "open": "" + fOpen,
          "high": "" + fHigh,
          "low": "" + fLow,
          "current": "" + fNewPrice,
          "volume": "" + fVolume,
          "amount": "" + fAmount
        }, function(err, result) {
          if (err) {
            return console.error("[REDIS][ERROR][IX] update " + corresponding_key + " failed for " + err + ".");
          }
        });
      }
    };

    return StockIX;

  })(WindTalker);

  stock_ix = new StockIX('IX', settings.host, settings.port);

  process.on('message', function(msg) {
    console.log("[CHILD] RECEIVED " + msg);
    if (msg === 'start') {
      stock_ix.listen();
    }
    return process.send("[CHILD] process#" + process.pid + " copy " + msg + ".");
  });

  process.on('exit', function() {
    console.log('EXIT ....');
    stock_ix.stop();
    return process.send("[CHILD] process#" + process.pid + " exit.");
  });

  process.on('SIGTERM', function() {
    console.log('SIGTERM ....');
    process.send("[CHILD] process#" + process.pid + " terminated.");
    return process.exit(0);
  });

  process.stdin.on('data', function(msg) {
    return console.log("[CHILD] process#" + process.pid + " stdout: " + msg);
  });

  process.stderr.on('data', function(msg) {
    return console.log("[CHILD] process#" + process.pid + " stderr: " + msg);
  });

}).call(this);
