// Generated by CoffeeScript 1.6.1
(function() {
  var Dispatcher, dsp, schedule, settings;

  settings = require('../config/settings');

  schedule = require('node-schedule');

  Dispatcher = (function() {

    function Dispatcher() {
      this.jobs = {};
    }

    Dispatcher.prototype.startJob = function(job) {
      var stock_job;
      stock_job = require('child_process').fork(__dirname + ("/stock_" + job + ".js"));
      this.jobs[job] = stock_job;
      this.assignSchedule(job);
      return stock_job.on('message', function(msg) {
        return console.log("[PARENT][RECEIVE] " + msg);
      });
    };

    Dispatcher.prototype.restartJob = function(job) {
      this.stopJob(job);
      return setTimeout((function() {
        return this.startJob(job);
      }), 3000);
    };

    Dispatcher.prototype.stopJob = function(job) {
      if (this.jobs[job]) {
        return this.jobs[job].kill('SIGTERM');
      }
    };

    Dispatcher.prototype.startAll = function() {
      var job, key, _ref, _results;
      _ref = this.jobs;
      _results = [];
      for (key in _ref) {
        job = _ref[key];
        _results.push(this.startJob(key));
      }
      return _results;
    };

    Dispatcher.prototype.stopAll = function() {
      var job, key, _ref, _results;
      _ref = this.jobs;
      _results = [];
      for (key in _ref) {
        job = _ref[key];
        _results.push(this.stopJob(key));
      }
      return _results;
    };

    Dispatcher.prototype.assignSchedule = function(job) {
      var func, invokFun;
      if (this.jobs[job]) {
        func = "" + job + "Schedule";
        eval("this." + func + "()");
        invokFun = "" + job + "JobCouldBeInvoked";
        if (eval("this." + invokFun + "()")) {
          return this.jobs[job].send('start');
        }
      }
    };

    Dispatcher.prototype.ixSchedule = function() {
      var ruleStart, ruleStop;
      ruleStart = new schedule.RecurrenceRule();
      ruleStart.dayOfWeek = [1];
      ruleStart.hour = 6;
      ruleStart.minute = 0;
      schedule.scheduleJob(ruleStart, function() {
        return this.startJob('ix');
      });
      ruleStop = new schedule.RecurrenceRule();
      ruleStop.dayOfWeek = [6];
      ruleStart.hour = 5;
      ruleStart.minute = 0;
      return schedule.scheduleJob(ruleStop, function() {
        return this.stopJob('ix');
      });
    };

    Dispatcher.prototype.ixJobCouldBeInvoked = function() {
      var date, dayIdx, hour;
      date = new Date();
      dayIdx = date.getDay();
      if (dayIdx === 0) {
        return false;
      }
      if (dayIdx === 2 || dayIdx === 3 || dayIdx === 4 || dayIdx === 5) {
        return true;
      }
      hour = date.getHours();
      if (dayIdx === 1 && hour >= 6) {
        return true;
      }
      if (dayIdx === 6 && hour <= 4) {
        return true;
      }
      return false;
    };

    return Dispatcher;

  })();

  exports.Dispatcher = Dispatcher;

  dsp = new Dispatcher();

  dsp.startJob('ix');

  setTimeout((function() {
    return dsp.stopAll();
  }), 10000);

  process.on('exit', function() {
    console.log('[PARENT] going to exit.');
    return dsp.stopAll();
  });

  process.on('SIGTERM', function() {
    console.log('[PARENT] got SIGTERM ....');
    return process.exit(0);
  });

}).call(this);
