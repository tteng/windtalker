// Generated by CoffeeScript 1.6.1
(function() {
  var Dispatcher, dsp, logger, schedule, settings,
    _this = this;

  settings = require('../config/settings');

  logger = require('../config/logger');

  schedule = require('node-schedule');

  Dispatcher = (function() {

    function Dispatcher() {
      var _this = this;
      this.usSchedule = function() {
        return Dispatcher.prototype.usSchedule.apply(_this, arguments);
      };
      this.hkSchedule = function() {
        return Dispatcher.prototype.hkSchedule.apply(_this, arguments);
      };
      this.szSchedule = function() {
        return Dispatcher.prototype.szSchedule.apply(_this, arguments);
      };
      this.shSchedule = function() {
        return Dispatcher.prototype.shSchedule.apply(_this, arguments);
      };
      this.ixSchedule = function() {
        return Dispatcher.prototype.ixSchedule.apply(_this, arguments);
      };
      logger.warn("welcome ...");
      this.jobs = {};
    }

    Dispatcher.prototype.startJob = function(job) {
      return this.assignSchedule(job);
    };

    Dispatcher.prototype.invokeJob = function(job, cmd) {
      var stock_job;
      if (cmd == null) {
        cmd = 'start';
      }
      stock_job = require('child_process').fork(__dirname + ("/stock_" + job + ".js"));
      this.jobs[job] = stock_job;
      stock_job.on('message', function(msg) {
        console.log("[PARENT][RECEIVE] " + msg);
        if (msg instanceof Error) {
          this.stopAll();
          return setTimeout((function() {
            return process.kill('SIGTERM');
          }), 5000);
        }
      });
      return stock_job.send(cmd);
    };

    Dispatcher.prototype.restartJob = function(job) {
      this.stopJob(job);
      return setTimeout((function() {
        return this.startJob(job);
      }), 3000);
    };

    Dispatcher.prototype.stopJob = function(job) {
      if (this.jobs[job]) {
        this.jobs[job].kill('SIGTERM');
      }
      return delete this.jobs[job];
    };

    Dispatcher.prototype.startAll = function() {
      var any, key, _ref, _results;
      _ref = settings.channels;
      _results = [];
      for (key in _ref) {
        any = _ref[key];
        _results.push(this.startJob(key));
      }
      return _results;
    };

    Dispatcher.prototype.stopAll = function() {
      var job, key, _ref, _results;
      _ref = this.jobs;
      _results = [];
      for (key in _ref) {
        job = _ref[key];
        _results.push(this.stopJob(key));
      }
      return _results;
    };

    Dispatcher.prototype.assignSchedule = function(job) {
      console.log("going to assign schedule for " + job);
      this["" + job + "Schedule"].call();
      if (this["" + job + "JobCouldBeInvoked"].call()) {
        return this.invokeJob(job);
      }
    };

    Dispatcher.prototype.ixSchedule = function() {
      var invokeJob, ruleStart, ruleStop, stopJob,
        _this = this;
      stopJob = this.stopJob;
      invokeJob = this.invokeJob;
      ruleStart = new schedule.RecurrenceRule();
      ruleStart.dayOfWeek = [1];
      ruleStart.hour = 6;
      ruleStart.minute = 0;
      schedule.scheduleJob(ruleStart, function() {
        return _this.invokeJob('ix');
      });
      ruleStop = new schedule.RecurrenceRule();
      ruleStop.dayOfWeek = [6];
      ruleStart.hour = 5;
      ruleStart.minute = 1;
      return schedule.scheduleJob(ruleStop, function() {
        return _this.stopJob('ix');
      });
    };

    Dispatcher.prototype.ixJobCouldBeInvoked = function() {
      var date, dayIdx, hour;
      date = new Date();
      dayIdx = date.getDay();
      if (dayIdx === 0) {
        return false;
      }
      if (dayIdx === 2 || dayIdx === 3 || dayIdx === 4 || dayIdx === 5) {
        return true;
      }
      hour = date.getHours();
      if (dayIdx === 1 && hour >= 6) {
        return true;
      }
      if (dayIdx === 6 && hour <= 4) {
        return true;
      }
      return false;
    };

    Dispatcher.prototype.shSchedule = function() {
      var invokeJob, ruleAftStart, ruleAftStop, ruleDownloadStart, ruleMorStart, ruleMorStop, stopJob,
        _this = this;
      stopJob = this.stopJob;
      invokeJob = this.invokeJob;
      ruleMorStart = new schedule.RecurrenceRule();
      ruleMorStart.dayOfWeek = [1, 2, 3, 4, 5];
      ruleMorStart.hour = 9;
      ruleMorStart.minute = 15;
      schedule.scheduleJob(ruleMorStart, function() {
        return _this.invokeJob('sh');
      });
      ruleMorStop = new schedule.RecurrenceRule();
      ruleMorStop.dayOfWeek = [1, 2, 3, 4, 5];
      ruleMorStop.hour = 11;
      ruleMorStop.minute = 30;
      schedule.scheduleJob(ruleMorStop, function() {
        return _this.stopJob('sh');
      });
      ruleAftStart = new schedule.RecurrenceRule();
      ruleAftStart.dayOfWeek = [1, 2, 3, 4, 5];
      ruleAftStart.hour = 13;
      ruleAftStart.minute = 0;
      schedule.scheduleJob(ruleAftStart, function() {
        return _this.invokeJob('sh');
      });
      ruleAftStop = new schedule.RecurrenceRule();
      ruleAftStop.dayOfWeek = [1, 2, 3, 4, 5];
      ruleAftStop.hour = 15;
      ruleAftStop.minute = 1;
      schedule.scheduleJob(ruleAftStop, function() {
        return _this.stopJob('sh');
      });
      ruleDownloadStart = new schedule.RecurrenceRule();
      ruleDownloadStart.dayOfWeek = [1, 2, 3, 4, 5];
      ruleDownloadStart.hour = 15;
      ruleDownloadStart.minute = 10;
      schedule.scheduleJob(ruleAftStart, function() {
        return _this.invokeJob('sh', 'download');
      });
      ruleAftStop = new schedule.RecurrenceRule();
      ruleAftStop.dayOfWeek = [1, 2, 3, 4, 5];
      ruleAftStop.hour = 15;
      ruleAftStop.minute = 15;
      return schedule.scheduleJob(ruleAftStop, function() {
        return _this.stopJob('sh');
      });
    };

    Dispatcher.prototype.shJobCouldBeInvoked = function() {
      var date, dayIdx, hour, minutes;
      date = new Date();
      dayIdx = date.getDay();
      if (dayIdx === 0 || dayIdx === 6) {
        return false;
      }
      hour = date.getHours();
      minutes = date.getMinutes();
      if (hour > 9 && hour < 11) {
        return true;
      }
      if (hour === 9 && minutes >= 15) {
        return true;
      }
      if (hour === 11 && minutes < 30) {
        return true;
      }
      if (hour >= 13 && hour < 15) {
        return true;
      }
      if (hour === 15 && minutes <= 10) {
        return true;
      }
      return false;
    };

    Dispatcher.prototype.szSchedule = function() {
      var invokeJob, ruleAftStart, ruleAftStop, ruleDownloadStart, ruleMorStart, ruleMorStop, stopJob,
        _this = this;
      stopJob = this.stopJob;
      invokeJob = this.invokeJob;
      ruleMorStart = new schedule.RecurrenceRule();
      ruleMorStart.dayOfWeek = [1, 2, 3, 4, 5];
      ruleMorStart.hour = 9;
      ruleMorStart.minute = 15;
      schedule.scheduleJob(ruleMorStart, function() {
        return _this.invokeJob('sz');
      });
      ruleMorStop = new schedule.RecurrenceRule();
      ruleMorStop.dayOfWeek = [1, 2, 3, 4, 5];
      ruleMorStop.hour = 11;
      ruleMorStop.minute = 30;
      schedule.scheduleJob(ruleMorStop, function() {
        return _this.stopJob('sz');
      });
      ruleAftStart = new schedule.RecurrenceRule();
      ruleAftStart.dayOfWeek = [1, 2, 3, 4, 5];
      ruleAftStart.hour = 13;
      ruleAftStart.minute = 0;
      schedule.scheduleJob(ruleAftStart, function() {
        return _this.invokeJob('sz');
      });
      ruleAftStop = new schedule.RecurrenceRule();
      ruleAftStop.dayOfWeek = [1, 2, 3, 4, 5];
      ruleAftStop.hour = 15;
      ruleAftStop.minute = 1;
      schedule.scheduleJob(ruleAftStop, function() {
        return _this.stopJob('sz');
      });
      ruleDownloadStart = new schedule.RecurrenceRule();
      ruleDownloadStart.dayOfWeek = [1, 2, 3, 4, 5];
      ruleDownloadStart.hour = 15;
      ruleDownloadStart.minute = 12;
      schedule.scheduleJob(ruleAftStart, function() {
        return _this.invokeJob('sz', 'download');
      });
      ruleAftStop = new schedule.RecurrenceRule();
      ruleAftStop.dayOfWeek = [1, 2, 3, 4, 5];
      ruleAftStop.hour = 15;
      ruleAftStop.minute = 17;
      return schedule.scheduleJob(ruleAftStop, function() {
        return _this.stopJob('sz');
      });
    };

    Dispatcher.prototype.szJobCouldBeInvoked = function() {
      var date, dayIdx, hour, minutes;
      date = new Date();
      dayIdx = date.getDay();
      if (dayIdx === 0 || dayIdx === 6) {
        return false;
      }
      hour = date.getHours();
      minutes = date.getMinutes();
      if (hour > 9 && hour < 11) {
        return true;
      }
      if (hour === 9 && minutes >= 15) {
        return true;
      }
      if (hour === 11 && minutes < 30) {
        return true;
      }
      if (hour >= 13 && hour < 15) {
        return true;
      }
      if (hour === 15 && minutes <= 10) {
        return true;
      }
      return false;
    };

    Dispatcher.prototype.hkSchedule = function() {
      var invokeJob, ruleAftStart, ruleAftStop, ruleMorStart, ruleMorStop, stopJob,
        _this = this;
      stopJob = this.stopJob;
      invokeJob = this.invokeJob;
      ruleMorStart = new schedule.RecurrenceRule();
      ruleMorStart.dayOfWeek = [1, 2, 3, 4, 5];
      ruleMorStart.hour = 9;
      ruleMorStart.minute = 30;
      schedule.scheduleJob(ruleMorStart, function() {
        return _this.invokeJob('hk');
      });
      ruleMorStop = new schedule.RecurrenceRule();
      ruleMorStop.dayOfWeek = [1, 2, 3, 4, 5];
      ruleMorStop.hour = 12;
      ruleMorStop.minute = 0;
      schedule.scheduleJob(ruleMorStop, function() {
        return _this.stopJob('hk');
      });
      ruleAftStart = new schedule.RecurrenceRule();
      ruleAftStart.dayOfWeek = [1, 2, 3, 4, 5];
      ruleAftStart.hour = 13;
      ruleAftStart.minute = 0;
      schedule.scheduleJob(ruleAftStart, function() {
        return _this.invokeJob('hk');
      });
      ruleAftStop = new schedule.RecurrenceRule();
      ruleAftStop.dayOfWeek = [1, 2, 3, 4, 5];
      ruleAftStop.hour = 16;
      ruleAftStop.minute = 1;
      return schedule.scheduleJob(ruleAftStop, function() {
        return _this.stopJob('hk');
      });
    };

    Dispatcher.prototype.hkJobCouldBeInvoked = function() {
      var date, dayIdx, hour, minutes;
      date = new Date();
      dayIdx = date.getDay();
      if (dayIdx === 0 || dayIdx === 6) {
        return false;
      }
      hour = date.getHours();
      minutes = date.getMinutes();
      if (hour >= 10 && hour < 12) {
        return true;
      }
      if (hour === 9 && minutes >= 30) {
        return true;
      }
      if (hour >= 13 && hour < 16) {
        return true;
      }
      return false;
    };

    Dispatcher.prototype.usSchedule = function() {
      var invokeJob, ruleAftStop, ruleDownloadStart, ruleMorStart, ruleMorStop, stopJob,
        _this = this;
      stopJob = this.stopJob;
      invokeJob = this.invokeJob;
      ruleMorStart = new schedule.RecurrenceRule();
      ruleMorStart.dayOfWeek = [1, 2, 3, 4, 5];
      ruleMorStart.hour = 22;
      ruleMorStart.minute = 30;
      schedule.scheduleJob(ruleMorStart, function() {
        return _this.invokeJob('us');
      });
      ruleMorStop = new schedule.RecurrenceRule();
      ruleMorStop.dayOfWeek = [2, 3, 4, 5, 6];
      ruleMorStop.hour = 5;
      ruleMorStop.minute = 1;
      schedule.scheduleJob(ruleMorStop, function() {
        return _this.stopJob('us');
      });
      ruleDownloadStart = new schedule.RecurrenceRule();
      ruleDownloadStart.dayOfWeek = [2, 3, 4, 5, 6];
      ruleDownloadStart.hour = 5;
      ruleDownloadStart.minute = 10;
      schedule.scheduleJob(ruleAftStart, function() {
        return _this.invokeJob('us', 'download');
      });
      ruleAftStop = new schedule.RecurrenceRule();
      ruleAftStop.dayOfWeek = [2, 3, 4, 5, 6];
      ruleAftStop.hour = 5;
      ruleAftStop.minute = 15;
      return schedule.scheduleJob(ruleAftStop, function() {
        return _this.stopJob('us');
      });
    };

    Dispatcher.prototype.usJobCouldBeInvoked = function() {
      var date, dayIdx, hour, minutes;
      date = new Date();
      dayIdx = date.getDay();
      hour = date.getHours();
      minutes = date.getMinutes();
      if ((dayIdx === 1 || dayIdx === 2 || dayIdx === 3 || dayIdx === 4 || dayIdx === 5) && hour >= 22 && minutes >= 30) {
        return true;
      }
      if ((dayIdx === 2 || dayIdx === 3 || dayIdx === 4 || dayIdx === 5 || dayIdx === 6) && hour < 5) {
        return true;
      }
      if ((dayIdx === 2 || dayIdx === 3 || dayIdx === 4 || dayIdx === 5 || dayIdx === 6) && hour === 5 && minutes <= 10) {
        return true;
      }
      return false;
    };

    return Dispatcher;

  })();

  exports.Dispatcher = Dispatcher;

  dsp = new Dispatcher();

  dsp.startAll();

  process.on('exit', function() {
    console.log('[PARENT] going to exit.');
    return dsp.stopAll();
  });

  process.on('SIGTERM', function() {
    console.log('[PARENT] got SIGTERM ....');
    dsp.stopAll();
    return setTimeout((function() {
      return process.exit(0);
    }), 5000);
  });

}).call(this);
