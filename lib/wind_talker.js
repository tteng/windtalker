// Generated by CoffeeScript 1.6.1
(function() {
  var WindTalker, fs, net, os, w, zlib;

  fs = require('fs');

  zlib = require('zlib');

  net = require('net');

  os = require('os');

  WindTalker = (function() {

    function WindTalker(channel, host, port) {
      this.channel = channel;
      this.host = host != null ? host : "121.199.14.113";
      this.port = port != null ? port : 7781;
      this.delimiter_ary = ['a8', 'b9', 'c0', 'd1'];
      this.greeting = "m=" + this.channel + ";u=dellsha01;p=jason3802;EX_HEAD=" + (this.delimiter_ary.join('')) + ";EX_TAIL=" + (this.delimiter_ary.reverse().join(''));
      this.client = new net.Socket();
      console.log("The cpu endian is " + (os.endianness()));
    }

    WindTalker.prototype.listen = function() {
      var _this = this;
      this.client.connect(this.port, this.host, function() {
        console.log("Connect to " + _this.host + ":" + _this.port);
        return _this.client.write(_this.greeting);
      });
      this.client.on('data', function(data) {
        var bite, data_copy, head, i, _i, _len;
        data_copy = new Buffer(data.length);
        data.copy(data_copy, 0, 0, data.length - 1);
        head = 0;
        for (i = _i = 0, _len = data_copy.length; _i < _len; i = ++_i) {
          bite = data_copy[i];
          if (_this.isHead(data, i)) {
            console.log("bingooo, got the head!");
            head = i;
          }
          console.log("" + i + " - " + (bite.toString('16')) + " \n");
        }
        return _this.client.destroy();
      });
      return this.client.on('close', function() {
        return console.log("Connection closed.");
      });
    };

    WindTalker.prototype.isHead = function(buff, idx) {
      var bite, result;
      result = false;
      bite = buff[idx];
      if (bite.toString('16').toLowerCase() === 'd1') {
        if (buff[idx + 1] && buff[idx + 1].toString('16').toLowerCase() === 'c0') {
          if (buff[idx + 2] && buff[idx + 2].toString('16').toLowerCase() === 'b9') {
            if (buff[idx + 3] && buff[idx + 3].toString('16').toLowerCase() === 'a8') {
              result = true;
            }
          }
        }
      }
      return result;
    };

    WindTalker.prototype.isTail = function(buff, idx) {
      var bite, result;
      result = false;
      bite = buff[idx];
      if (bite.toString('16').toLowerCase() === 'a8') {
        if (buff[idx + 1].toString('16').toLowerCase() === 'b9') {
          if (buff[idx + 2].toString('16').toLowerCase() === 'c0') {
            if (buff[idx + 3].toString('16').toLowerCase() === 'd1') {
              result = true;
            }
          }
        }
      }
      return result;
    };

    WindTalker.prototype.wind_decode = function(data) {
      var _this = this;
      console.log("copyed data length: " + data.length);
      return zlib.inflate(data, function(error, result) {
        return console.log("result.size: " + result.length);
      });
    };

    return WindTalker;

  })();

  w = new WindTalker('IX');

  w.listen();

}).call(this);
