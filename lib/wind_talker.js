// Generated by CoffeeScript 1.6.1
(function() {
  var WindTalker, fs, net, os, w, zlib;

  fs = require('fs');

  zlib = require('zlib');

  net = require('net');

  os = require('os');

  WindTalker = (function() {

    function WindTalker(channel, host, port) {
      var _ref, _ref1;
      this.channel = channel;
      this.host = host != null ? host : "121.199.14.113";
      this.port = port != null ? port : 7781;
      this.delimiter_ary = ['a8', 'b9', 'c0', 'd1'];
      this.greeting = "m=" + this.channel + ";u=dellsha01;p=jason3802;EX_HEAD=a8b9c0d1;EX_SIZE=1;";
      this.client = new net.Socket();
      this.delta = new Buffer(0);
      _ref = [0, 0], this.data_size = _ref[0], this.compressed_data_size = _ref[1];
      _ref1 = [0, false], this.head = _ref1[0], this.found_head = _ref1[1];
      console.log("The cpu endian is " + (os.endianness()));
    }

    WindTalker.prototype.listen = function() {
      var _this = this;
      this.client.connect(this.port, this.host, function() {
        console.log("Connect to " + _this.host + ":" + _this.port);
        return _this.client.write(_this.greeting);
      });
      this.client.on('data', function(data) {
        var bite, i, _i, _len, _ref;
        console.log("\n\n==============================");
        console.log("receive chunk size: " + data.length);
        _this.delta = Buffer.concat([_this.delta, data]);
        console.log("delta length: " + _this.delta.length);
        if (!_this.found_head) {
          if (!(_this.delta.length < 16)) {
            _ref = _this.delta;
            for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
              bite = _ref[i];
              console.log(_this.delta[i].toString('16'));
              if (_this.isHead(data, i)) {
                _this.head = i;
                _this.found_head = true;
                break;
              }
            }
          }
          if (_this.found_head) {
            _this.data_size = _this.delta.readUInt32LE(_this.head + 4);
            _this.compressed_data_size = _this.delta.readUInt32LE(_this.head + 4 + 4);
            console.log("bingooo, got the head:" + _this.head + ".");
            console.log("data_size: " + _this.data_size);
            console.log("compressed_data_size: " + _this.compressed_data_size);
          }
        }
        if (_this.delta.length >= (_this.head + 4 + 4 + _this.data_size)) {
          _this.processStream(_this.delta);
          return _this.client.destroy();
        } else {
          return console.log("continue receiving ...");
        }
      });
      return this.client.on('close', function() {
        return console.log("Connection closed.");
      });
    };

    WindTalker.prototype.processStream = function(data) {
      var compressed_data, _ref, _ref1;
      console.log("God bless, received complete data");
      compressed_data = new Buffer(this.data_size);
      compressed_data.fill(0);
      this.delta.copy(compressed_data, 0, this.head + 4 + 4, this.head + 4 + 4 + 155);
      zlib.inflate(compressed_data, function(error, result) {
        if (error) {
          throw error;
        }
        return console.log("uncompressed data size: " + result.length);
      });
      _ref = [0, 0], this.data_size = _ref[0], this.compressed_data_size = _ref[1];
      return _ref1 = [0, false], this.head = _ref1[0], this.found_head = _ref1[1], _ref1;
    };

    WindTalker.prototype.isHead = function(buff, idx) {
      var bite, result;
      result = false;
      bite = buff[idx];
      if (bite && bite.toString('16').toLowerCase() === 'd1') {
        if (buff[idx + 1] && buff[idx + 1].toString('16').toLowerCase() === 'c0') {
          if (buff[idx + 2] && buff[idx + 2].toString('16').toLowerCase() === 'b9') {
            if (buff[idx + 3] && buff[idx + 3].toString('16').toLowerCase() === 'a8') {
              result = true;
            }
          }
        }
      }
      return result;
    };

    return WindTalker;

  })();

  w = new WindTalker('IX');

  w.listen();

}).call(this);
