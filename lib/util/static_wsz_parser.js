// Generated by CoffeeScript 1.6.1
(function() {
  var StaticWszParser, WindTalker, fs, os, redis, settings, zlib,
    _this = this;

  fs = require('fs');

  os = require('os');

  zlib = require('zlib');

  settings = require('../config/settings');

  redis = require('../db/redis_util').createClient();

  WindTalker = require('../models/wind_talker');

  StaticWszParser = (function() {

    function StaticWszParser(filePath, market, saveFunc) {
      var _this = this;
      this.filePath = filePath;
      this.market = market;
      this.saveFunc = saveFunc;
      this.analyze_data = function(cursor, raw_buf) {
        return StaticWszParser.prototype.analyze_data.apply(_this, arguments);
      };
    }

    StaticWszParser.prototype.parse = function() {
      var _this = this;
      return fs.open(this.filePath, 'r', function(err, fd) {
        var iterate_data_file;
        if (err) {
          return console.log("[Error] read origin data failed");
        } else {
          iterate_data_file = _this.iterate_data_file;
          return fs.stat(_this.filePath, function(err, stat) {
            var file_size;
            if (err) {
              return console.log("[Error] get origin file size failed");
            } else {
              file_size = stat.size;
              console.log("origin file size: " + file_size);
              return _this.iterate_data_file(fd, 0, file_size);
            }
          });
        }
      });
    };

    StaticWszParser.prototype.iterate_data_file = function(fd, cursor, file_size) {
      var length, meta_buf, offset, position,
        _this = this;
      if (cursor >= file_size) {
        console.log("reach file end, that's all.");
        return;
      }
      meta_buf = new Buffer(8);
      meta_buf.fill(0);
      return fs.read(fd, meta_buf, offset = 0, length = 8, position = cursor, function(err, bytesRead, buffer) {
        var chunk_size, data_buf, iterate_buf, raw_data_size;
        chunk_size = meta_buf.readUInt32LE(0);
        raw_data_size = meta_buf.readUInt32LE(4);
        data_buf = new Buffer(chunk_size);
        data_buf.fill(0);
        console.log("cursor: " + cursor + ", chunk_size: " + (chunk_size - 4) + ", raw_data_size: " + raw_data_size + ", copy index from " + (cursor + 4 + 4) + " to " + (cursor + 4 + 4 + chunk_size - 4 - 1));
        iterate_buf = _this.iterate_buf;
        fs.read(fd, data_buf, 0, chunk_size - 4, cursor + 4 + 4, function(err, bytesRead, buffer) {
          return _this.iterate_buf(data_buf, raw_data_size);
        });
        cursor = cursor + 4 + 4 + chunk_size - 4;
        return _this.iterate_data_file(fd, cursor, file_size);
      });
    };

    StaticWszParser.prototype.iterate_buf = function(raw_buf, raw_data_size) {
      var _this = this;
      console.log("raw buf size: " + raw_buf.length);
      return zlib.inflate(raw_buf, function(error, result) {
        if (error) {
          console.log("[Error] inflate data failed.");
          throw error;
        } else {
          if (result.length === raw_data_size) {
            console.log("[Info] inflate succeed.");
            if (result.length % 156 === 0) {
              return _this.analyze_data(0, result);
            } else {
              return consloe.log("[Error] invalid buffer size");
            }
          }
        }
      });
    };

    StaticWszParser.prototype.analyze_data = function(cursor, raw_buf) {
      var buf, buyAmount, buyBids, contract, data, feature_price, holding, i, j, latest_deal, m_fAmount, m_fHigh, m_fLastClose, m_fLow, m_fNewPrice, m_fOpen, m_fVolume, market, result, sellAmount, sellBids, time_t, total_deal, val, _i, _j, _results;
      _results = [];
      while (cursor < raw_buf.length) {
        data = new Buffer(156);
        data.fill(0);
        result = '';
        buf = raw_buf.copy(data, 0, cursor, cursor + 156);
        time_t = data.readUInt32LE(0);
        result += "" + time_t + ",";
        for (i = _i = 4; _i <= 15; i = ++_i) {
          if (data[i] === 0) {
            break;
          }
        }
        market = data.toString('ascii', 4, i);
        result += "" + market + ",";
        for (j = _j = 16; _j <= 31; j = ++_j) {
          if (data[j] === 0) {
            break;
          }
        }
        contract = data.toString('ascii', 16, j);
        result += "" + contract + ",";
        total_deal = data.readFloatLE(32);
        result += "" + total_deal + ",";
        latest_deal = data.readFloatLE(36);
        result += "" + latest_deal + ",";
        holding = data.readFloatLE(40);
        result += "" + holding + ",";
        feature_price = data.readFloatLE(44);
        result += "" + feature_price + ",";
        m_fLastClose = data.readFloatLE(48);
        result += "" + m_fLastClose + ",";
        m_fOpen = data.readFloatLE(52);
        result += "" + m_fOpen + ",";
        m_fHigh = data.readFloatLE(56);
        result += "" + m_fHigh + ",";
        m_fLow = data.readFloatLE(60);
        result += "" + m_fLow + ",";
        m_fNewPrice = data.readFloatLE(64);
        result += "" + m_fNewPrice + ",";
        m_fVolume = data.readFloatLE(68);
        result += "" + m_fVolume + ",";
        m_fAmount = data.readFloatLE(72);
        result += "" + m_fAmount + ",[";
        i = 0;
        buyBids = [];
        while (i < 5) {
          val = data.readFloatLE(76 + i * 4);
          buyBids.push(val);
          result += "" + val;
          if (i !== 4) {
            result += ",";
          }
          i += 1;
        }
        result += "],[";
        i = 0;
        buyAmount = [];
        while (i < 5) {
          val = data.readFloatLE(96 + i * 4);
          buyAmount.push(val);
          result += "" + val;
          if (i !== 4) {
            result += ",";
          }
          i += 1;
        }
        result += "],[";
        i = 0;
        sellBids = [];
        while (i < 5) {
          val = data.readFloatLE(116 + i * 4);
          sellBids.push(val);
          result += "" + val;
          if (i !== 4) {
            result += ",";
          }
          i += 1;
        }
        result += "],[";
        i = 0;
        sellAmount = [];
        while (i < 5) {
          val = data.readFloatLE(136 + i * 4);
          sellAmount.push(val);
          result += "" + val;
          if (i !== 4) {
            result += ",";
          }
          i += 1;
        }
        result += "]";
        console.log("result: " + result);
        result = null;
        this.saveFunc(time_t, market, m_fLastClose, m_fOpen, m_fHigh, m_fLow, m_fNewPrice, m_fVolume, m_fAmount);
        _results.push(cursor = cursor + 156);
      }
      return _results;
    };

    StaticWszParser.prototype.redisKey = function(ticker) {
      var key;
      if (ticker) {
        return key = "" + settings.redisNamespace + ":" + this.market + "Close:" + ticker;
      } else {
        return null;
      }
    };

    return StaticWszParser;

  })();

  module.exports = StaticWszParser;

}).call(this);
